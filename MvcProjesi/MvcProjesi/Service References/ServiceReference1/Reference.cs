//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcProjesi.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Followed", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTwitter")]
    [System.SerializableAttribute()]
    public partial class Followed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowedIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MemberIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowedID {
            get {
                return this.FollowedIDField;
            }
            set {
                if ((this.FollowedIDField.Equals(value) != true)) {
                    this.FollowedIDField = value;
                    this.RaisePropertyChanged("FollowedID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowerID {
            get {
                return this.FollowerIDField;
            }
            set {
                if ((this.FollowerIDField.Equals(value) != true)) {
                    this.FollowerIDField = value;
                    this.RaisePropertyChanged("FollowerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Follower", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTwitter")]
    [System.SerializableAttribute()]
    public partial class Follower : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowedIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MemberIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowedID {
            get {
                return this.FollowedIDField;
            }
            set {
                if ((this.FollowedIDField.Equals(value) != true)) {
                    this.FollowedIDField = value;
                    this.RaisePropertyChanged("FollowedID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowerID {
            get {
                return this.FollowerIDField;
            }
            set {
                if ((this.FollowerIDField.Equals(value) != true)) {
                    this.FollowerIDField = value;
                    this.RaisePropertyChanged("FollowerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTwitter")]
    [System.SerializableAttribute()]
    public partial class Member : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MemberIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tweet", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTwitter")]
    [System.SerializableAttribute()]
    public partial class Tweet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MemberIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TweetDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TweetIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TweetDate {
            get {
                return this.TweetDateField;
            }
            set {
                if ((this.TweetDateField.Equals(value) != true)) {
                    this.TweetDateField = value;
                    this.RaisePropertyChanged("TweetDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TweetID {
            get {
                return this.TweetIDField;
            }
            set {
                if ((this.TweetIDField.Equals(value) != true)) {
                    this.TweetIDField = value;
                    this.RaisePropertyChanged("TweetID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollowed", ReplyAction="http://tempuri.org/IService1/DeleteFollowedResponse")]
        string DeleteFollowed(int MemberID, int FollowerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollowed", ReplyAction="http://tempuri.org/IService1/DeleteFollowedResponse")]
        System.Threading.Tasks.Task<string> DeleteFollowedAsync(int MemberID, int FollowerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollower", ReplyAction="http://tempuri.org/IService1/DeleteFollowerResponse")]
        string DeleteFollower(int MemberID, int FollowedID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollower", ReplyAction="http://tempuri.org/IService1/DeleteFollowerResponse")]
        System.Threading.Tasks.Task<string> DeleteFollowerAsync(int MemberID, int FollowedID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowerID", ReplyAction="http://tempuri.org/IService1/GetFollowerIDResponse")]
        MvcProjesi.ServiceReference1.Followed[] GetFollowerID(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowerID", ReplyAction="http://tempuri.org/IService1/GetFollowerIDResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Followed[]> GetFollowerIDAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowedID", ReplyAction="http://tempuri.org/IService1/GetFollowedIDResponse")]
        MvcProjesi.ServiceReference1.Follower[] GetFollowedID(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowedID", ReplyAction="http://tempuri.org/IService1/GetFollowedIDResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Follower[]> GetFollowedIDAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowed", ReplyAction="http://tempuri.org/IService1/GetFollowedResponse")]
        MvcProjesi.ServiceReference1.Member[] GetFollowed(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowed", ReplyAction="http://tempuri.org/IService1/GetFollowedResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetFollowedAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollower", ReplyAction="http://tempuri.org/IService1/GetFollowerResponse")]
        MvcProjesi.ServiceReference1.Member[] GetFollower(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollower", ReplyAction="http://tempuri.org/IService1/GetFollowerResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetFollowerAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTweet", ReplyAction="http://tempuri.org/IService1/GetTweetResponse")]
        MvcProjesi.ServiceReference1.Tweet[] GetTweet(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTweet", ReplyAction="http://tempuri.org/IService1/GetTweetResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Tweet[]> GetTweetAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFav", ReplyAction="http://tempuri.org/IService1/NumberOfFavResponse")]
        int NumberOfFav(int TweetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFav", ReplyAction="http://tempuri.org/IService1/NumberOfFavResponse")]
        System.Threading.Tasks.Task<int> NumberOfFavAsync(int TweetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfTweet", ReplyAction="http://tempuri.org/IService1/NumberOfTweetResponse")]
        int NumberOfTweet(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfTweet", ReplyAction="http://tempuri.org/IService1/NumberOfTweetResponse")]
        System.Threading.Tasks.Task<int> NumberOfTweetAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFollowed", ReplyAction="http://tempuri.org/IService1/NumberOfFollowedResponse")]
        int NumberOfFollowed(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFollowed", ReplyAction="http://tempuri.org/IService1/NumberOfFollowedResponse")]
        System.Threading.Tasks.Task<int> NumberOfFollowedAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFollowers", ReplyAction="http://tempuri.org/IService1/NumberOfFollowersResponse")]
        int NumberOfFollowers(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NumberOfFollowers", ReplyAction="http://tempuri.org/IService1/NumberOfFollowersResponse")]
        System.Threading.Tasks.Task<int> NumberOfFollowersAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOtherMember", ReplyAction="http://tempuri.org/IService1/GetOtherMemberResponse")]
        MvcProjesi.ServiceReference1.Member[] GetOtherMember(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOtherMember", ReplyAction="http://tempuri.org/IService1/GetOtherMemberResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetOtherMemberAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMember", ReplyAction="http://tempuri.org/IService1/GetMemberResponse")]
        MvcProjesi.ServiceReference1.Member GetMember(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMember", ReplyAction="http://tempuri.org/IService1/GetMemberResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member> GetMemberAsync(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MemberInsert", ReplyAction="http://tempuri.org/IService1/MemberInsertResponse")]
        string MemberInsert(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MemberInsert", ReplyAction="http://tempuri.org/IService1/MemberInsertResponse")]
        System.Threading.Tasks.Task<string> MemberInsertAsync(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FollowedInsert", ReplyAction="http://tempuri.org/IService1/FollowedInsertResponse")]
        string FollowedInsert(int MemberID, int FollowerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FollowedInsert", ReplyAction="http://tempuri.org/IService1/FollowedInsertResponse")]
        System.Threading.Tasks.Task<string> FollowedInsertAsync(int MemberID, int FollowerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FollowerInsert", ReplyAction="http://tempuri.org/IService1/FollowerInsertResponse")]
        string FollowerInsert(int MemberID, int FollowedID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FollowerInsert", ReplyAction="http://tempuri.org/IService1/FollowerInsertResponse")]
        System.Threading.Tasks.Task<string> FollowerInsertAsync(int MemberID, int FollowedID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TweetInsert", ReplyAction="http://tempuri.org/IService1/TweetInsertResponse")]
        string TweetInsert(MvcProjesi.ServiceReference1.Tweet tweet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TweetInsert", ReplyAction="http://tempuri.org/IService1/TweetInsertResponse")]
        System.Threading.Tasks.Task<string> TweetInsertAsync(MvcProjesi.ServiceReference1.Tweet tweet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isRight", ReplyAction="http://tempuri.org/IService1/isRightResponse")]
        int isRight(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isRight", ReplyAction="http://tempuri.org/IService1/isRightResponse")]
        System.Threading.Tasks.Task<int> isRightAsync(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isThereAnAccount", ReplyAction="http://tempuri.org/IService1/isThereAnAccountResponse")]
        bool isThereAnAccount(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isThereAnAccount", ReplyAction="http://tempuri.org/IService1/isThereAnAccountResponse")]
        System.Threading.Tasks.Task<bool> isThereAnAccountAsync(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TweetDelete", ReplyAction="http://tempuri.org/IService1/TweetDeleteResponse")]
        string TweetDelete(int tweetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TweetDelete", ReplyAction="http://tempuri.org/IService1/TweetDeleteResponse")]
        System.Threading.Tasks.Task<string> TweetDeleteAsync(int tweetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberID", ReplyAction="http://tempuri.org/IService1/GetMemberIDResponse")]
        int GetMemberID(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberID", ReplyAction="http://tempuri.org/IService1/GetMemberIDResponse")]
        System.Threading.Tasks.Task<int> GetMemberIDAsync(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MemberUpdate", ReplyAction="http://tempuri.org/IService1/MemberUpdateResponse")]
        string MemberUpdate(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MemberUpdate", ReplyAction="http://tempuri.org/IService1/MemberUpdateResponse")]
        System.Threading.Tasks.Task<string> MemberUpdateAsync(MvcProjesi.ServiceReference1.Member member);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FavInsert", ReplyAction="http://tempuri.org/IService1/FavInsertResponse")]
        string FavInsert(int tweetID, int memberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FavInsert", ReplyAction="http://tempuri.org/IService1/FavInsertResponse")]
        System.Threading.Tasks.Task<string> FavInsertAsync(int tweetID, int memberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberTweet", ReplyAction="http://tempuri.org/IService1/GetMemberTweetResponse")]
        MvcProjesi.ServiceReference1.Tweet[] GetMemberTweet(int MemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberTweet", ReplyAction="http://tempuri.org/IService1/GetMemberTweetResponse")]
        System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Tweet[]> GetMemberTweetAsync(int MemberID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MvcProjesi.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MvcProjesi.ServiceReference1.IService1>, MvcProjesi.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DeleteFollowed(int MemberID, int FollowerID) {
            return base.Channel.DeleteFollowed(MemberID, FollowerID);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFollowedAsync(int MemberID, int FollowerID) {
            return base.Channel.DeleteFollowedAsync(MemberID, FollowerID);
        }
        
        public string DeleteFollower(int MemberID, int FollowedID) {
            return base.Channel.DeleteFollower(MemberID, FollowedID);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFollowerAsync(int MemberID, int FollowedID) {
            return base.Channel.DeleteFollowerAsync(MemberID, FollowedID);
        }
        
        public MvcProjesi.ServiceReference1.Followed[] GetFollowerID(int MemberID) {
            return base.Channel.GetFollowerID(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Followed[]> GetFollowerIDAsync(int MemberID) {
            return base.Channel.GetFollowerIDAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Follower[] GetFollowedID(int MemberID) {
            return base.Channel.GetFollowedID(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Follower[]> GetFollowedIDAsync(int MemberID) {
            return base.Channel.GetFollowedIDAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Member[] GetFollowed(int MemberID) {
            return base.Channel.GetFollowed(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetFollowedAsync(int MemberID) {
            return base.Channel.GetFollowedAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Member[] GetFollower(int MemberID) {
            return base.Channel.GetFollower(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetFollowerAsync(int MemberID) {
            return base.Channel.GetFollowerAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Tweet[] GetTweet(int MemberID) {
            return base.Channel.GetTweet(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Tweet[]> GetTweetAsync(int MemberID) {
            return base.Channel.GetTweetAsync(MemberID);
        }
        
        public int NumberOfFav(int TweetID) {
            return base.Channel.NumberOfFav(TweetID);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfFavAsync(int TweetID) {
            return base.Channel.NumberOfFavAsync(TweetID);
        }
        
        public int NumberOfTweet(int MemberID) {
            return base.Channel.NumberOfTweet(MemberID);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfTweetAsync(int MemberID) {
            return base.Channel.NumberOfTweetAsync(MemberID);
        }
        
        public int NumberOfFollowed(int MemberID) {
            return base.Channel.NumberOfFollowed(MemberID);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfFollowedAsync(int MemberID) {
            return base.Channel.NumberOfFollowedAsync(MemberID);
        }
        
        public int NumberOfFollowers(int MemberID) {
            return base.Channel.NumberOfFollowers(MemberID);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfFollowersAsync(int MemberID) {
            return base.Channel.NumberOfFollowersAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Member[] GetOtherMember(int MemberID) {
            return base.Channel.GetOtherMember(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member[]> GetOtherMemberAsync(int MemberID) {
            return base.Channel.GetOtherMemberAsync(MemberID);
        }
        
        public MvcProjesi.ServiceReference1.Member GetMember(int MemberID) {
            return base.Channel.GetMember(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Member> GetMemberAsync(int MemberID) {
            return base.Channel.GetMemberAsync(MemberID);
        }
        
        public string MemberInsert(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.MemberInsert(member);
        }
        
        public System.Threading.Tasks.Task<string> MemberInsertAsync(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.MemberInsertAsync(member);
        }
        
        public string FollowedInsert(int MemberID, int FollowerID) {
            return base.Channel.FollowedInsert(MemberID, FollowerID);
        }
        
        public System.Threading.Tasks.Task<string> FollowedInsertAsync(int MemberID, int FollowerID) {
            return base.Channel.FollowedInsertAsync(MemberID, FollowerID);
        }
        
        public string FollowerInsert(int MemberID, int FollowedID) {
            return base.Channel.FollowerInsert(MemberID, FollowedID);
        }
        
        public System.Threading.Tasks.Task<string> FollowerInsertAsync(int MemberID, int FollowedID) {
            return base.Channel.FollowerInsertAsync(MemberID, FollowedID);
        }
        
        public string TweetInsert(MvcProjesi.ServiceReference1.Tweet tweet) {
            return base.Channel.TweetInsert(tweet);
        }
        
        public System.Threading.Tasks.Task<string> TweetInsertAsync(MvcProjesi.ServiceReference1.Tweet tweet) {
            return base.Channel.TweetInsertAsync(tweet);
        }
        
        public int isRight(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.isRight(member);
        }
        
        public System.Threading.Tasks.Task<int> isRightAsync(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.isRightAsync(member);
        }
        
        public bool isThereAnAccount(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.isThereAnAccount(member);
        }
        
        public System.Threading.Tasks.Task<bool> isThereAnAccountAsync(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.isThereAnAccountAsync(member);
        }
        
        public string TweetDelete(int tweetID) {
            return base.Channel.TweetDelete(tweetID);
        }
        
        public System.Threading.Tasks.Task<string> TweetDeleteAsync(int tweetID) {
            return base.Channel.TweetDeleteAsync(tweetID);
        }
        
        public int GetMemberID(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.GetMemberID(member);
        }
        
        public System.Threading.Tasks.Task<int> GetMemberIDAsync(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.GetMemberIDAsync(member);
        }
        
        public string MemberUpdate(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.MemberUpdate(member);
        }
        
        public System.Threading.Tasks.Task<string> MemberUpdateAsync(MvcProjesi.ServiceReference1.Member member) {
            return base.Channel.MemberUpdateAsync(member);
        }
        
        public string FavInsert(int tweetID, int memberID) {
            return base.Channel.FavInsert(tweetID, memberID);
        }
        
        public System.Threading.Tasks.Task<string> FavInsertAsync(int tweetID, int memberID) {
            return base.Channel.FavInsertAsync(tweetID, memberID);
        }
        
        public MvcProjesi.ServiceReference1.Tweet[] GetMemberTweet(int MemberID) {
            return base.Channel.GetMemberTweet(MemberID);
        }
        
        public System.Threading.Tasks.Task<MvcProjesi.ServiceReference1.Tweet[]> GetMemberTweetAsync(int MemberID) {
            return base.Channel.GetMemberTweetAsync(MemberID);
        }
    }
}
